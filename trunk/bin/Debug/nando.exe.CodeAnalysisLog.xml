<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\programmi\sviluppo\microsoft fxcop 1.32\Xml\FxCopReport.Xsl"?>
<FxCopReport Version="1.32">
 <Namespaces>
  <Namespace Name="nando">
   <Messages>
    <Message TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="95" Level="Error">Correct the casing of namespace name 'nando'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando\bin\Debug\nando.exe">
   <Modules>
    <Module Name="nando.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'nando' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
       <Issue Name="NoAttr" Certainty="95" Level="Error">'nando' should be marked with CLSCompliantAttribute and its value should be true.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Ini">
       <Types>
        <Type Name="IniFile" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="IniFile" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'IniFile' in class 'IniFile' exists as a discrete term. If your usage is intended to be single word, case it as 'Inifile'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="IniFiles.cs" Line="33">Correct the casing of parameter name 'INIPath'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String):System.Int32" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, IniFile.GetPrivateProfileString(String, String, String, StringBuilder, Int32, String):Int32 should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IniReadValue(System.String,System.String):System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="IniRead" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="IniFiles.cs" Line="75">The compound word 'IniRead' in method 'IniReadValue' exists as a discrete term. If your usage is intended to be single word, case it as 'Iniread'.</Issue>
            </Message>
            <Message Id="ReadValue" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="IniFiles.cs" Line="75">The compound word 'ReadValue' in method 'IniReadValue' exists as a discrete term. If your usage is intended to be single word, case it as 'Readvalue'.</Issue>
            </Message>
            <Message Id="0#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="IniFiles.cs" Line="75">Correct the casing of parameter name 'Section'.</Issue>
            </Message>
            <Message Id="1#" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="IniFiles.cs" Line="75">Correct the casing of parameter name 'Key'.</Issue>
            </Message>
            <Message Id="i" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="IniFiles.cs" Line="75">IniFile.IniReadValue(String, String):String declares a local, 'i', of type System.Int32, which is never used or is only assigned to. Use this local or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="IniWriteValue(System.String,System.String,System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="IniWrite" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="IniFiles.cs" Line="56">The compound word 'IniWrite' in method 'IniWriteValue' exists as a discrete term. If your usage is intended to be single word, case it as 'Iniwrite'.</Issue>
            </Message>
            <Message Id="WriteValue" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="IniFiles.cs" Line="56">The compound word 'WriteValue' in method 'IniWriteValue' exists as a discrete term. If your usage is intended to be single word, case it as 'Writevalue'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="path" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'path' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="WritePrivateProfileString(System.String,System.String,System.String,System.String):System.Int64" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, IniFile.WritePrivateProfileString(String, String, String, String):Int64 should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="return" TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of PInvoke IniFile.WritePrivateProfileString(String, String, String, String):Int64 will be 8 bytes wide on 32-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 4 bytes wide on 32-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'System.Int64'.</Issue>
             <Issue Name="Return" Certainty="95" Level="Error">As it is declared in your code, the return type of PInvoke IniFile.WritePrivateProfileString(String, String, String, String):Int64 will be 8 bytes wide on 64-bit platforms. This is not correct, as the actual native declaration of this API indicates it should be 4 bytes wide on 64-bit platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of 'System.Int64'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="nando">
       <Types>
        <Type Name="AboutNando" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="AboutNando" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'AboutNando' in class 'AboutNando' exists as a discrete term. If your usage is intended to be single word, case it as 'Aboutnando'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="InitializeComponent():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="AboutNando.Designer.cs" Line="84">AboutNando.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'About Nando'</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="AboutNando.Designer.cs" Line="62">AboutNando.InitializeComponent():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Nando is a CAT'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AfterParsingEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="AfterParsing" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'AfterParsing' in delegate 'AfterParsingEventHandler' exists as a discrete term. If your usage is intended to be single word, case it as 'Afterparsing'.</Issue>
          </Message>
          <Message Id="EventHandler" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'EventHandler' in delegate 'AfterParsingEventHandler' exists as a discrete term. If your usage is intended to be single word, case it as 'Eventhandler'.</Issue>
          </Message>
          <Message Id="ParsingEvent" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'ParsingEvent' in delegate 'AfterParsingEventHandler' exists as a discrete term. If your usage is intended to be single word, case it as 'Parsingevent'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="BaseItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'BaseItem' to protected.</Issue>
          </Message>
          <Message Id="BaseItem" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'BaseItem' in class 'BaseItem' exists as a discrete term. If your usage is intended to be single word, case it as 'Baseitem'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.String,nando.BaseItem,nando.PathParseModel)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="model" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="22">Parameter 'model' of BaseItem.BaseItem(String, BaseItem, PathParseModel) is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="Artists" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="85">Change BaseItem.Artists:String[] to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="HumanizedDuration" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HumanizedDuration" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="115">The compound word 'HumanizedDuration' in property 'HumanizedDuration' exists as a discrete term. If your usage is intended to be single word, case it as 'Humanizedduration'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="get_HumanizedDuration():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="124">BaseItem.get_HumanizedDuration():String makes a call to System.String.Format(System.String,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="119">BaseItem.get_HumanizedDuration():String makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
               <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="122">BaseItem.get_HumanizedDuration():String makes a call to System.String.Format(System.String,System.Object,System.Object) that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.String.Format(System.IFormatProvider,System.String,System.Object[]).</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="set_HumanizedDuration(System.String):System.Void" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.ApplicationException.#ctor(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="127">BaseItem.set_HumanizedDuration(String):Void passes a literal as parameter 1 of a call to ApplicationException.ApplicationException(String). Retrieve the following string argument from a resource table instead: 'Don't set Humanized duration, set the Duration in seconds instead.'</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="127">BaseItem.set_HumanizedDuration(String):Void creates an exception of type 'System.ApplicationException', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message TypeName="MarkMethodsAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
               <Issue Certainty="95" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="126">The 'this' parameter (or 'Me' in VB) of BaseItem.set_HumanizedDuration(String):Void is never used. Mark the method as static (or Shared in VB) or use 'this'/'Me' in the method body, if appropriate.</Issue>
              </Message>
              <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
               <Issue Certainty="95" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="126">Parameter 'value' of BaseItem.set_HumanizedDuration(String):Void is never used. Remove the parameter or use it in the method body.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="HumanizedSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HumanizedSize" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="57">The compound word 'HumanizedSize' in property 'HumanizedSize' exists as a discrete term. If your usage is intended to be single word, case it as 'Humanizedsize'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="get_HumanizedSize():System.String" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="66">BaseItem.get_HumanizedSize():String makes a call to System.Double.ToString that does not explicitly provide an IFormatProvider. This should be replaced with a call to System.Double.ToString(System.IFormatProvider).</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="ParentItem" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ParentItem" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Items.cs" Line="72">The compound word 'ParentItem' in property 'ParentItem' exists as a discrete term. If your usage is intended to be single word, case it as 'Parentitem'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BeforeParsingEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="BeforeParsing" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'BeforeParsing' in delegate 'BeforeParsingEventHandler' exists as a discrete term. If your usage is intended to be single word, case it as 'Beforeparsing'.</Issue>
          </Message>
          <Message Id="EventHandler" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'EventHandler' in delegate 'BeforeParsingEventHandler' exists as a discrete term. If your usage is intended to be single word, case it as 'Eventhandler'.</Issue>
          </Message>
          <Message Id="ParsingEvent" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'ParsingEvent' in delegate 'BeforeParsingEventHandler' exists as a discrete term. If your usage is intended to be single word, case it as 'Parsingevent'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="FileItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="FileItem" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FileItem' in class 'FileItem' exists as a discrete term. If your usage is intended to be single word, case it as 'Fileitem'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="FolderItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="FolderItem" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FolderItem' in class 'FolderItem' exists as a discrete term. If your usage is intended to be single word, case it as 'Folderitem'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MainForm" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="MainForm" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'MainForm' in class 'MainForm' exists as a discrete term. If your usage is intended to be single word, case it as 'Mainform'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Main.cs" Line="36">MainForm.MainForm() passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Test'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="ActivateOrDeactivateAddBtn():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Main.cs" Line="42">Replace the call to String.op_Inequality("") in 'MainForm.ActivateOrDeactivateAddBtn():Void' with a call to String.IsNullOrEmpty.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Main.cs" Line="42">Replace the call to String.op_Inequality("") in 'MainForm.ActivateOrDeactivateAddBtn():Void' with a call to String.IsNullOrEmpty.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="inipath" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'inipath' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnAfterParsingFunction():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Main.cs" Line="68">MainForm.OnAfterParsingFunction():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Catalog a new disk'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="OnBeforeParsingFunction():System.Void" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Main.cs" Line="62">MainForm.OnBeforeParsingFunction():Void passes a literal as parameter 1 of a call to Control.set_Text(String):Void. Retrieve the following string argument from a resource table instead: 'Parsing... please wait'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="nandoSql" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="nandoSql" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'nandoSql' in class 'nandoSql' exists as a discrete term. If your usage is intended to be single word, case it as 'nandosql'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Correct the casing of type name 'nandoSql'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name=".ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="cnn" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="nandoSql.cs" Line="21">nandoSql.nandoSql(String) declares a local, 'cnn', of type System.Data.SQLite.SQLiteConnection, which is never used or is only assigned to. Use this local or remove it.</Issue>
            </Message>
            <Message Id="path" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="nandoSql.cs" Line="21">Parameter 'path' of nandoSql.nandoSql(String) is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PathParseModel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="ParseModel" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'ParseModel' in class 'PathParseModel' exists as a discrete term. If your usage is intended to be single word, case it as 'Parsemodel'.</Issue>
          </Message>
          <Message Id="PathParse" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'PathParse' in class 'PathParseModel' exists as a discrete term. If your usage is intended to be single word, case it as 'Pathparse'.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="CriticalError">Implement IDisposable on 'nando.PathParseModel' as it instantiates members of the following IDisposable types: System.ComponentModel.BackgroundWorker</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="_name" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'PathParseModel._name' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="_root" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'PathParseModel._root' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="AfterParsing" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AfterParsing" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'AfterParsing' in event 'AfterParsing' exists as a discrete term. If your usage is intended to be single word, case it as 'Afterparsing'.</Issue>
            </Message>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'AfterParsingEventHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'AfterParsingEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="EventsShouldNotHaveBeforeOrAfterPrefix" Category="Microsoft.Naming" CheckId="CA1713" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="After" Certainty="90" Level="Error">Replace 'AfterParsing' with a past tense version of the event name.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="BeforeParsing" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BeforeParsing" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'BeforeParsing' in event 'BeforeParsing' exists as a discrete term. If your usage is intended to be single word, case it as 'Beforeparsing'.</Issue>
            </Message>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'BeforeParsingEventHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'BeforeParsingEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="EventsShouldNotHaveBeforeOrAfterPrefix" Category="Microsoft.Naming" CheckId="CA1713" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="Before" Certainty="90" Level="Error">Replace 'BeforeParsing' with a present tense version of the event name.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Program" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="Main(System.String[]):System.Void" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="args" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="Program.cs" Line="25">Parameter 'args' of Program.Main(String[]):Void is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SHFILEINFO" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the capitalization of type name 'SHFILEINFO'.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'nando.SHFILEINFO' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'nando.SHFILEINFO' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="dwAttributes" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dwAttributes" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'dwAttributes' in field 'dwAttributes' exists as a discrete term. If your usage is intended to be single word, case it as 'dwattributes'.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'dwAttributes' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="hIcon" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'hIcon' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'hIcon' private.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="iIcon" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'iIcon' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'iIcon' private.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="szDisplayName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DisplayName" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'DisplayName' in field 'szDisplayName' exists as a discrete term. If your usage is intended to be single word, case it as 'Displayname'.</Issue>
            </Message>
            <Message Id="szDisplay" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'szDisplay' in field 'szDisplayName' exists as a discrete term. If your usage is intended to be single word, case it as 'szdisplay'.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'szDisplayName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="szTypeName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="szType" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'szType' in field 'szTypeName' exists as a discrete term. If your usage is intended to be single word, case it as 'sztype'.</Issue>
            </Message>
            <Message Id="TypeName" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Name="ShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'TypeName' in field 'szTypeName' exists as a discrete term. If your usage is intended to be single word, case it as 'Typename'.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Make 'szTypeName' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Win32" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'nando.Win32' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="GetSmallAssociatedIcon(System.String):System.Drawing.Icon" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="SystemFunc.cs" Line="48">Win32.GetSmallAssociatedIcon(String):Icon makes a call to System.String.ToLower that does not explicitly provide a CultureInfo. This should be replaced with a call to System.String.ToLower(System.Globalization.CultureInfo).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="GetSmallAssociatedIcon(System.String,System.UInt32):System.Drawing.Icon" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="SystemFunc.cs" Line="52">Win32.GetSmallAssociatedIcon(String, UInt32):Icon calls into Marshal.SizeOf(Object):Int32 which has a LinkDemand. By making this call, Marshal.SizeOf(Object):Int32 is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;-&gt;System.Runtime.InteropServices.Marshal.SizeOf(System.Object) : Int32&#xD;&#xA;-&gt;nando.Win32.GetSmallAssociatedIcon(System.String,System.UInt32) : Icon&#xD;&#xA;-&gt;nando.Win32.GetSmallAssociatedIcon(System.String) : Icon&#xD;&#xA;-&gt;nando.FileItem.#ctor(System.String,nando.BaseItem,nando.PathParseModel) : Void</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Documents and Settings\DARIOSKY\Desktop\Dariosky\MION\dotNET\nando" File="SystemFunc.cs" Line="52">Win32.GetSmallAssociatedIcon(String, UInt32):Icon calls into Marshal.SizeOf(Object):Int32 which has a LinkDemand. By making this call, Marshal.SizeOf(Object):Int32 is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;-&gt;System.Runtime.InteropServices.Marshal.SizeOf(System.Object) : Int32&#xD;&#xA;-&gt;nando.Win32.GetSmallAssociatedIcon(System.String,System.UInt32) : Icon&#xD;&#xA;-&gt;nando.Win32.GetSmallFolderIcon : Icon&#xD;&#xA;-&gt;nando.FolderItem.#ctor(System.String,nando.BaseItem,nando.PathParseModel) : Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="SHGetFileInfo(System.String,System.UInt32,nando.SHFILEINFO&amp;,System.UInt32,System.UInt32):System.IntPtr" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2008-09-01 15:01:57Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a DllImport method, Win32.SHGetFileInfo(String, UInt32, SHFILEINFO&amp;, UInt32, UInt32):IntPtr should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in '{0}' to protected.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Design/AbstractTypesShouldNotHaveConstructors.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign '{0}' with a strong name key.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Design/AssembliesShouldHaveValidStrongNames.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">'{0}' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Performance/AvoidUninstantiatedInternalClasses.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the FxCop team.</Description>
   <Resolution Name="Default">It appears that field '{0}' is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Performance/AvoidUnusedPrivateFields.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="ShouldBeDiscreteTerm">The compound word '{0}' in {1} '{2}' exists as a discrete term. If your usage is intended to be single word, case it as '{3}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Naming/CompoundWordsShouldBeCasedCorrectly.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>Declare event handlers correctly</Name>
   <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
   <Resolution Name="First">Declare the first parameter of '{0}' as an object named 'sender'.</Resolution>
   <Resolution Name="Second">Declare the second parameter of '{0}' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Design/DeclareEventHandlersCorrectly.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Public or protected instance fields limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the  implementation details of the underlying data.</Description>
   <Resolution Name="Default">Make '{0}' private or internal (Friend in VB, public private in C++) and provide a public or protected property to access it.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Design/DoNotDeclareVisibleInstanceFields.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Security/DoNotIndirectlyExposeMethodsWithLinkDemands.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="SecurityRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassLiteralsAsLocalizedParameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>String literals that are embedded in source code are difficult to localize. Avoid passing string literals as arguments in circumstances where a localized string is generally expected. Most localized applications, for example, should localize string arguments that are passed to exception constructors. When creating an Exception instance, therefore, a string argument retrieved from a string table is more appropriate than a string literal.</Description>
   <Resolution Name="Default">{0} passes a literal as parameter {1} of a call to {2}. Retrieve the following string argument from a resource table instead: '{3}'</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Globalization/DoNotPassLiteralsAsLocalizedParameters.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type '{1}', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Usage/DoNotRaiseReservedExceptionTypes.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="EventsShouldNotHaveBeforeOrAfterPrefix" Category="Microsoft.Naming" CheckId="CA1713">
   <Name>Events should not have before or after prefix</Name>
   <Description>Use present and past tense for pre-events and post-events, instead of using 'Before' and 'After'. For example, use Closing and Closed rather than BeforeClose and AfterClose.</Description>
   <Resolution Name="After">Replace '{0}' with a past tense version of the event name.</Resolution>
   <Resolution Name="Before">Replace '{0}' with a present tense version of the event name.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Naming/EventsShouldNotHaveBeforeOrAfterPrefix.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are pascal-cased. Parameter identifiers are camel-cased. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor.</Description>
   <Resolution Name="Namespace">Correct the casing of namespace name '{0}'.</Resolution>
   <Resolution Name="Parameter">Correct the casing of parameter name '{0}'.</Resolution>
   <Resolution Name="Type">Correct the casing of type name '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Naming/IdentifiersShouldBeCasedCorrectly.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="LongAcronymsShouldBePascalCased" Category="Microsoft.Naming" CheckId="CA1705">
   <Name>Long acronyms should be pascal-cased</Name>
   <Description>Acronyms of three or more letters should be Pascal-cased. For example, use XmlSpace rather than XMLSpace. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Type">Correct the capitalization of type name '{0}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Naming/LongAcronymsShouldBePascalCased.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliant</Name>
   <Description>Assemblies should explicitly state their Cls compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="NoAttr">'{0}' should be marked with CLSCompliantAttribute and its value should be true.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Design/MarkAssembliesWithClsCompliant.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="MarkMethodsAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark methods as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in VB). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that insures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in VB) of {0} is never used. Mark the method as static (or Shared in VB) or use 'this'/'Me' in the method body, if appropriate.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Performance/MarkMethodsAsStatic.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move pinvokes to native methods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a DllImport method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Design/MovePInvokesToNativeMethodsClass.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="DesignRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">'{0}' should override Equals.</Resolution>
   <Resolution Name="op_Equality">'{0}' should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Performance/OverrideEqualsAndOperatorEqualsOnValueTypes.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="PInvokeDeclarationsShouldBePortable" Category="Microsoft.Portability" CheckId="CA1901">
   <Name>PInvoke declarations should be portable</Name>
   <Description>.</Description>
   <Resolution Name="Return">As it is declared in your code, the return type of PInvoke {0} will be {1} bytes wide on {2} platforms. This is not correct, as the actual native declaration of this API indicates it should be {3} bytes wide on {2} platforms. Consult the MSDN Platform SDK documentation for help determining what data type should be used instead of '{4}'.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Portability/PInvokeDeclarationsShouldBePortable.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="PortabilityRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111">
   <Name>Pointers should not be visible</Name>
   <Description>IntPtr and UIntPtr fields should be declared as private. Exposing non-private pointers can cause a security weakness.</Description>
   <Resolution Name="Default">Make '{0}' private.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Security/PointersShouldNotBeVisible.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="75">CriticalError</MessageLevel>
   <File Name="SecurityRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Performance/PropertiesShouldNotReturnArrays.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a local, '{1}', of type {2}, which is never used or is only assigned to. Use this local or remove it.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Performance/RemoveUnusedLocals.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to insure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter '{0}' of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Performance/AvoidUnusedParameters.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a System.Globalization.CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture.</Description>
   <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide a CultureInfo. This should be replaced with a call to {2}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Globalization/SpecifyCultureInfo.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the common language runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture.</Description>
   <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide an IFormatProvider. This should be replaced with a call to {2}.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Globalization/SpecifyIFormatProvider.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to String.{0}({1}) in '{2}' with a call to String.IsNullOrEmpty.</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Performance/TestForEmptyStringsUsingStringLength.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="1.32.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="Default">Implement IDisposable on '{0}' as it instantiates members of the following IDisposable types: {1}</Resolution>
   <Owner />
   <Url>http://www.gotdotnet.com/team/fxcop/docs/rules.aspx?version=1.32&amp;url=/Design/TypesThatOwnDisposableFieldsShouldBeDisposable.html</Url>
   <Email>askfxcop@microsoft.com</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="1.32.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="InternalError">Internal Error</String>
  <String Key="Line">Line</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">FxCop Analysis Report</String>
 </Localized>
</FxCopReport>
